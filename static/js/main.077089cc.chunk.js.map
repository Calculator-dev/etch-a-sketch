{"version":3,"sources":["components/EtchASketch.js","components/Square.js","style/logo.png","Logo.js","components/AppHeader.js","components/AppFooter.js","App.js","index.js"],"names":["Square","color","clear","className","onMouseEnter","e","target","style","backgroundColor","Math","random","toString","siteLogo","src","logo","alt","AppHeader","Logo","AppFooter","userInput","prompt","test","alert","EtchASketch","grid","Array","fill","gridCss","gridTemplateColumns","gridTemplateRows","useState","setClear","setColor","onClick","window","location","reload","preventDefault","map","square","i","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4HAQA,I,yDCYeA,EAlBA,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MAYrB,OACI,qBAAKC,UAAU,SAASC,aAXX,SAACC,GACA,UAAVJ,EACAI,EAAEC,OAAOC,MAAMC,gBAAkBP,EAElB,WAAVA,IACLI,EAAEC,OAAOC,MAAMC,gBAAkB,KAAuB,SAAhBC,KAAKC,UAAuB,GAAGC,SAAS,MAMpCJ,MAAO,CAAEC,gBAAiBN,EAAQ,QAAU,OCfrF,MAA0B,iCCM1BU,EAJE,WACb,OAAO,qBAAKC,IAAKC,EAAMC,IAAI,OAAOZ,UAAU,UCWjCa,EAXG,WACd,OACI,iCACI,sBAAKb,UAAU,SAAf,UACI,oBAAIA,UAAU,YAAd,2BACA,cAACc,EAAD,UCJDC,EAJG,WACd,OAAO,kGLKPC,EAAYC,OAAO,6CAEf,WAAWC,KAAKF,IAAcA,EAAY,IAAMA,EAAY,KAChEG,MAAM,iDACNH,EAAYC,OAAO,oDAIvB,IAsDeG,EAtDK,WAEhB,IAAMC,EAAOC,MAAMN,EAAYA,GAAWO,KAAK,MAE3CC,EAAU,CACVC,oBAAoB,UAAD,OAAYT,EAAZ,WACnBU,iBAAiB,UAAD,OAAYV,EAAZ,YAGpB,EAA0BW,oBAAS,GAAnC,mBAAO5B,EAAP,KAAc6B,EAAd,KACA,EAA0BD,mBAAS,SAAnC,mBAAO7B,EAAP,KAAc+B,EAAd,KAwBA,OAEI,qBAAK7B,UAAU,iBAAf,SACI,sBAAKA,UAAU,uBAAf,UACI,cAAC,EAAD,IACA,sBAAKA,UAAU,UAAf,UACI,wBAAQ8B,QA5BN,WACdC,OAAOC,SAASC,UA2BwBjC,UAAU,QAAtC,yBACA,wBAAQ8B,QAfF,WAClBD,EAAS,UAcmC7B,UAAU,QAA1C,mBACA,wBAAQ8B,QAZD,WACnBD,EAAS,WAWoC7B,UAAU,SAA3C,0BACA,wBAAQ8B,QA3BN,SAAC5B,GACfA,EAAEgC,iBAKEN,GAJC7B,IAyBmCC,UAAU,QAAtC,4BAEJ,qBAAKA,UAAU,OAAOI,MAAOoB,EAA7B,SACKH,EAAKc,KAAI,SAACC,EAAQC,GAAT,OAAe,cAAC,EAAD,CAAQtC,MAAOA,EAAOD,MAAOA,GAAYuC,QAEtE,cAAC,EAAD,UMjDDC,MAVf,WAGE,OACE,qBAAKtC,UAAU,MAAf,SACE,cAAC,EAAD,OCHNuC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.077089cc.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport Square from \"./Square\";\r\nimport AppHeader from \"./AppHeader\";\r\nimport AppFooter from \"./AppFooter\";\r\n\r\n\r\nlet userInput = prompt(\"Please enter a number between 16 and 100\");\r\n\r\nwhile (!/^[0-9]+$/.test(userInput) || userInput < 16 || userInput > 100) {\r\n    alert(\"You did not enter a number between 16 and 100\");\r\n    userInput = prompt(\"Please Enter a VALID number between 16 and 100: \");\r\n}\r\n\r\n\r\nconst EtchASketch = () => {\r\n\r\n    const grid = Array(userInput * userInput).fill(null);\r\n\r\n    let gridCss = {\r\n        gridTemplateColumns: `repeat(${userInput}, auto)`,\r\n        gridTemplateRows: `repeat(${userInput}, auto)`,\r\n    }\r\n\r\n    const [clear, setClear] = useState(false);\r\n    const [color, setColor] = useState(\"black\");\r\n\r\n    const resetGrid = () => {\r\n        window.location.reload();\r\n    }\r\n\r\n    const clearGrid = (e) => {\r\n        e.preventDefault();\r\n        if (!clear) {\r\n            setClear(true);\r\n        }\r\n        else {\r\n            setClear(false);\r\n        }\r\n    }\r\n\r\n    const getBlackColor = () => {\r\n        setColor(\"black\");\r\n    }\r\n\r\n    const getRandomColor = () => {\r\n        setColor(\"random\")\r\n    }\r\n\r\n    return (\r\n\r\n        <div className=\"main-container\">\r\n            <div className=\"sketch-pad-container\">\r\n                <AppHeader />\r\n                <div className=\"buttons\">\r\n                    <button onClick={resetGrid} className=\"reset\">Reset Board</button>\r\n                    <button onClick={getBlackColor} className=\"black\">Black</button>\r\n                    <button onClick={getRandomColor} className=\"random\">Random Color</button>\r\n                    <button onClick={clearGrid} className=\"clear\">Clear Board</button>\r\n                </div>\r\n                <div className=\"grid\" style={gridCss}>\r\n                    {grid.map((square, i) => <Square clear={clear} color={color} key={i} />)}\r\n                </div>\r\n                <AppFooter />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EtchASketch;","import React from \"react\";\r\n\r\nconst Square = ({ color, clear }) => {\r\n\r\n    const painting = (e) => {\r\n        if (color === \"black\") {\r\n            e.target.style.backgroundColor = color;\r\n        }\r\n        else if (color === \"random\") {\r\n            e.target.style.backgroundColor = \"#\" + (Math.random() * 0xFFFFFF << 0).toString(16);\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"square\" onMouseEnter={painting} style={{ backgroundColor: clear ? \"white\" : \"\" }}>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Square;","export default __webpack_public_path__ + \"static/media/logo.f64eda80.png\";","import logo from \"./style/logo.png\";\r\n\r\nconst siteLogo = () => {\r\n    return <img src={logo} alt=\"Logo\" className=\"logo\" />\r\n}\r\n\r\nexport default siteLogo;","import Logo from \"../Logo\";\r\n\r\n\r\nconst AppHeader = () => {\r\n    return (\r\n        <header>\r\n            <div className=\"header\">\r\n                <h1 className=\"app-title\">Etch-a-Sketch</h1>\r\n                <Logo />\r\n            </div>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default AppHeader;","const AppFooter = () => {\r\n    return <footer>Paragon Etch-a-Sketch 2021 @ Copyright, All rights reserved</footer>;\r\n};\r\n\r\nexport default AppFooter;\r\n","import EtchASketch from \"./components/EtchASketch\";\r\nimport \"./style/index.css\";\r\n\r\nfunction App() {\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <EtchASketch />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './style/index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}